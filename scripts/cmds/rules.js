const defaultRules = [
 "ржПржЗ ржЧрзНрж░рзБржкрзЗ ржЧрж╛рж▓рж╛ржЧрж╛рж▓рж┐ ржмрж╛ ржмрж╛ржЬрзЗ ржнрж╛рж╖рж╛ ржмрзНржпржмрж╣рж╛рж░ ржирж┐рж╖рж┐ржжрзНржзред",
 "ржХрзЛржирзЛ ржзрж░ржирзЗрж░ рж╕рзНржкрзНржпрж╛ржо ржмрж╛ ржлрзНрж▓рж╛ржбрж┐ржВ ржХрж░ржмрзЗржи ржирж╛ред",
 "ржЕржкрзНрж░рж╛рж╕ржЩрзНржЧрж┐ржХ ржмрж╛ ржЕржкрзНрж░ржпрж╝рзЛржЬржирзАржпрж╝ рж▓рж┐ржВржХ рж╢рзЗржпрж╝рж╛рж░ ржХрж░рж╛ ржпрж╛ржмрзЗ ржирж╛ред",
 "ржзрж░рзНржо, рж░рж╛ржЬржирзАрждрж┐ ржмрж╛ рж╕ржВржмрзЗржжржирж╢рзАрж▓ ржмрж┐рж╖ржпрж╝рзЗ ржмрж┐рждрж░рзНржХ ржерзЗржХрзЗ ржмрж┐рж░ржд ржерж╛ржХрзБржиред",
 "ржХрж╛рж░рзЛ ржмрзНржпржХрзНрждрж┐ржЧржд рждржерзНржп рж╢рзЗржпрж╝рж╛рж░ ржХрж░ржмрзЗржи ржирж╛, рж╕ржорзНржорж╛ржи ржмржЬрж╛ржпрж╝ рж░рж╛ржЦрзБржиред",
 "ржирждрзБржи рж╕ржжрж╕рзНржпржжрзЗрж░ рж╕рзНржмрж╛ржЧржд ржЬрж╛ржирж╛ржи ржПржмржВ рж╕рж╛рж╣рж╛ржпрзНржп ржХрж░рзБржиред",
 "ржПржбржорж┐ржирзЗрж░ ржЕржирзБржорждрж┐ ржЫрж╛ржбрж╝рж╛ ржХрзЛржирзЛ ржмрж┐ржЬрзНржЮрж╛ржкржи/ржкрзНрж░ржорзЛрж╢ржи ржиржпрж╝ред",
 "ржХрзЛржирзЛ рж╕ржжрж╕рзНржпржХрзЗ ржмрзНржпржХрзНрждрж┐ржЧрждржнрж╛ржмрзЗ ржЕржкржорж╛ржи ржХрж░рж╛ ржирж┐рж╖рзЗржзред",
 "Group ржП рж╢рзБржзрзБржорж╛рждрзНрж░ ржмрж╛ржВрж▓рж╛ ржЕржержмрж╛ ржЗржВрж░рзЗржЬрж┐рждрзЗ ржХржерж╛ ржмрж▓рж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред",
 "ржирж┐рзЯржо ржнржЩрзНржЧ ржХрж░рж▓рзЗ ржмрзНржпрж╛ржи/ржорж┐ржЙржЯ/рж░рж┐ржорзБржн ржХрж░рж╛ рж╣рждрзЗ ржкрж╛рж░рзЗред"
];

module.exports = {
 config: {
 name: "rules",
 aliases: ["rule", "рж░рзБрж▓", "рж░рзБрж▓рж╕", "ржирж┐рзЯржо", "ржЖржЗржи"],
 version: "1.7",
 author: "Chitron Bhattacharjee",
 role: 0,
 countDown: 5,
 shortDescription: {
 en: "view or manage group rules"
 },
 description: {
 en: "Show, add, edit, move or delete group rules with anime style output"
 },
 category: "group",
 guide: {
 en: "{pn} [add|-a] <text>\n{pn} [edit|-e] <n> <text>\n{pn} [move|-m] <n1> <n2>\n{pn} [delete|-d] <n>\n{pn} [reset|-r]"
 }
 },

 onChat: async function({ message, event, args, threadsData }) {
 const lowerBody = event.body?.toLowerCase();
 if (!["rules", "rule", "рж░рзБрж▓", "рж░рзБрж▓рж╕", "ржирж┐рзЯржо", "ржЖржЗржи"].some(alias => lowerBody?.startsWith(alias))) return;
 await module.exports.onStart({ message, event, args, threadsData });
 },

 onStart: async function({ message, event, args, threadsData }) {
 const threadID = event.threadID;
 let rules = await threadsData.get(threadID, "data.rules");

 // First-time use: set default rules
 if (!rules || rules.length === 0) {
 rules = [...defaultRules];
 await threadsData.set(threadID, rules, "data.rules");
 }

 const sub = args[0];

 // RESET
 if (["reset", "-r"].includes(sub)) {
 await threadsData.set(threadID, [], "data.rules");
 return message.reply("ЁЯТг ЁЭУРЁЭУ╡ЁЭУ╡ ЁЭУ╗ЁЭУ╛ЁЭУ╡ЁЭУоЁЭУ╝ ЁЭУ▒ЁЭУкЁЭУ┐ЁЭУо ЁЭУлЁЭУоЁЭУоЁЭУ╖ ЁЭУ╗ЁЭУоЁЭУ╝ЁЭУоЁЭУ╜.\nAdd new ones with `+rules add <rule>`");
 }

 // ADD
 if (["add", "-a"].includes(sub)) {
 const content = args.slice(1).join(" ");
 if (!content) return message.reply("тЪая╕П ЁЭУЯЁЭУ╡ЁЭУоЁЭУкЁЭУ╝ЁЭУо ЁЭУ╣ЁЭУ╗ЁЭУ╕ЁЭУ┐ЁЭУ▓ЁЭУнЁЭУо ЁЭУ╗ЁЭУ╛ЁЭУ╡ЁЭУо ЁЭУ╜ЁЭУоЁЭФБЁЭУ╜ ЁЭУ╜ЁЭУ╕ ЁЭУкЁЭУнЁЭУн.");
 rules.push(content);
 await threadsData.set(threadID, rules, "data.rules");
 return message.reply(`тЬЕ ЁЭУбЁЭУ╛ЁЭУ╡ЁЭУо ЁЭУкЁЭУнЁЭУнЁЭУоЁЭУн: ${content}`);
 }

 // EDIT
 if (["edit", "-e"].includes(sub)) {
 const index = parseInt(args[1]) - 1;
 const content = args.slice(2).join(" ");
 if (isNaN(index) || !rules[index]) return message.reply("тЭМ ЁЭУШЁЭУ╖ЁЭУ┐ЁЭУкЁЭУ╡ЁЭУ▓ЁЭУн ЁЭУ╗ЁЭУ╛ЁЭУ╡ЁЭУо ЁЭУ╖ЁЭУ╛ЁЭУ╢ЁЭУлЁЭУоЁЭУ╗.");
 rules[index] = content;
 await threadsData.set(threadID, rules, "data.rules");
 return message.reply(`тЬПя╕П ЁЭУбЁЭУ╛ЁЭУ╡ЁЭУо ${index + 1} ЁЭУ╛ЁЭУ╣ЁЭУнЁЭУкЁЭУ╜ЁЭУоЁЭУн.`);
 }

 // MOVE
 if (["move", "-m"].includes(sub)) {
 const i1 = parseInt(args[1]) - 1;
 const i2 = parseInt(args[2]) - 1;
 if (isNaN(i1) || isNaN(i2) || !rules[i1] || !rules[i2]) return message.reply("тЭМ ЁЭУШЁЭУ╖ЁЭУ┐ЁЭУкЁЭУ╡ЁЭУ▓ЁЭУн ЁЭУ▓ЁЭУ╖ЁЭУнЁЭУоЁЭФБЁЭУоЁЭУ╝.");
 [rules[i1], rules[i2]] = [rules[i2], rules[i1]];
 await threadsData.set(threadID, rules, "data.rules");
 return message.reply(`ЁЯФА ЁЭУвЁЭФАЁЭУкЁЭУ╣ЁЭУ╣ЁЭУоЁЭУн ЁЭУ╗ЁЭУ╛ЁЭУ╡ЁЭУо ${i1 + 1} ЁЭУкЁЭУ╖ЁЭУн ${i2 + 1}.`);
 }

 // DELETE
 if (["delete", "-d"].includes(sub)) {
 const index = parseInt(args[1]) - 1;
 if (isNaN(index) || !rules[index]) return message.reply("тЭМ ЁЭУШЁЭУ╖ЁЭУ┐ЁЭУкЁЭУ╡ЁЭУ▓ЁЭУн ЁЭУ╗ЁЭУ╛ЁЭУ╡ЁЭУо ЁЭУ╖ЁЭУ╛ЁЭУ╢ЁЭУлЁЭУоЁЭУ╗.");
 const removed = rules.splice(index, 1);
 await threadsData.set(threadID, rules, "data.rules");
 return message.reply(`ЁЯЧСя╕П ЁЭУбЁЭУоЁЭУ╢ЁЭУ╕ЁЭУ┐ЁЭУоЁЭУн: ${removed[0]}`);
 }

 // SHOW RULES
 const formatted = rules.map((r, i) => `${i + 1}. ${r}`).join("\n");
 message.reply(`ЁЯМ╕ ЁЭУгЁЭУ▒ЁЭУ▓ЁЭУ╝ ЁЭУЦЁЭУ╗ЁЭУ╕ЁЭУ╛ЁЭУ╣ ЁЭУбЁЭУ╛ЁЭУ╡ЁЭУоЁЭУ╝ ЁЯМ╕\n\n${formatted}`);
 }
};