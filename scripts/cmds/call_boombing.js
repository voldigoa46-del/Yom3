const axios = require("axios");
const deltaNext = 5;

function expToLevel(exp) {
 return Math.floor((1 + Math.sqrt(1 + 8 * exp / deltaNext)) / 2);
}

module.exports = {
 config: {
 name: "call",
 version: "1.0.1",
 author: "Chitron Bhattacharjee",
 countDown: 15,
 role: 0,
 shortDescription: {
 en: "Call bomber (BD only)"
 },
 description: {
 en: "Sends a series of call bomb requests to a Bangladeshi number. Cost: 100 coin"
 },
 category: "tools",
 guide: {
 en: "call 01xxxxxxxxx"
 }
 },

 onChat: async function ({ event, message, args, usersData }) {
 const input = args.join(" ").trim();
 if (!input.toLowerCase().startsWith("call")) return;

 const number = input.split(" ")[1];
 const senderID = event.senderID;

 // üîç Get user info
 const userData = await usersData.get(senderID);
 const exp = userData.exp || 0;
 const balance = userData.money || 0;
 const level = expToLevel(exp);

 // üîê Level requirement
 if (level < 2) {
 return message.reply("üö´ ‡¶è‡¶á ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶§‡ßá ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶≤‡ßá‡¶≠‡ßá‡¶≤ ‡¶ï‡¶Æ‡¶™‡¶ï‡ßç‡¶∑‡ßá 2 ‡¶π‡¶§‡ßá ‡¶π‡¶¨‡ßá!");
 }

 // üì± Invalid number
 if (!number || !/^01[0-9]{9}$/.test(number)) {
 return message.reply(
 "üìµ ‡¶è‡¶ï‡¶ü‡¶ø ‡¶¨‡ßà‡¶ß ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ‡¶¶‡ßá‡¶∂‡¶ø ‡¶Æ‡ßã‡¶¨‡¶æ‡¶á‡¶≤ ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ ‡¶¶‡¶ø‡¶®!\n" +
 "üëâ ‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£: call 01xxxxxxxxx\n" +
 "‚ö†Ô∏è ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶ï‡¶æ‡¶â‡¶ï‡ßá ‡¶¨‡¶ø‡¶∞‡¶ï‡ßç‡¶§ ‡¶ï‡¶∞‡¶§‡ßá ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶¨‡ßá‡¶® ‡¶®‡¶æ‡•§\n" +
 "üí∏ ‡¶™‡ßç‡¶∞‡¶§‡¶ø ‡¶¨‡¶æ‡¶∞‡ßá ‡ßß‡ß¶‡ß¶ coin ‡¶ï‡¶æ‡¶ü‡¶æ ‡¶π‡¶¨‡ßá‡•§"
 );
 }

 // üí∏ Balance check
 if (balance < 100) {
 return message.reply(`‚ùå ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶ï‡¶æ‡¶õ‡ßá ‡¶Ø‡¶•‡ßá‡¶∑‡ßç‡¶ü coin ‡¶®‡ßá‡¶á!\nüîª ‡¶¶‡¶∞‡¶ï‡¶æ‡¶∞: 100 coin\nü™ô ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ coin: ${balance}`);
 }

 // ‚úÖ Deduct coin
 await usersData.set(senderID, {
 money: balance - 100
 });

 message.reply(`üìû ‡¶ï‡¶≤ ‡¶¨‡ßã‡¶Æ‡ßç‡¶¨‡¶ø‡¶Ç ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá ${number} ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞‡ßá...\nüí∏ ‡ßß‡ß¶‡ß¶ coin ‡¶ï‡¶æ‡¶ü‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§\nüïê ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶Ö‡¶™‡ßá‡¶ï‡ßç‡¶∑‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®...`);

 try {
 const response = await axios.get(`https://tbblab.shop/callbomber.php?mobile=${number}`);
 return message.reply(`‚úÖ ‡¶ï‡¶≤ ‡¶¨‡ßã‡¶Æ‡ßç‡¶¨‡¶ø‡¶Ç ‡¶∏‡¶Æ‡ßç‡¶™‡¶®‡ßç‡¶® ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá ${number} ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞‡ßá!`);
 } catch (error) {
 return message.reply(`‚ùå ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø ‡¶ò‡¶ü‡ßá‡¶õ‡ßá: ${error.message}`);
 }
 },

 onStart: async function () {}
};