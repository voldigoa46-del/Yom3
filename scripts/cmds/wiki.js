const axios = require("axios");

module.exports = {
 config: {
 name: "wikisearch",
 aliases: ["wiki", "wikibio", "wikiimg", "wikiquote", "wikifight", "wikifact", "wikipersonality", "wikitoday", "wikivideo", "wikirelated"],
 version: "2.3",
 author: "Chitron Bhattacharjee",
 role: 0,
 shortDescription: {
 en: "ржЙржЗржХрж┐ржкрж┐ржбрж┐ржпрж╝рж╛ ржЪрж╛рж▓рж┐ржд ржХржорж╛ржирзНржб"
 },
 longDescription: {
 en: "ржЙржЗржХрж┐ржкрж┐ржбрж┐ржпрж╝рж╛ ржерзЗржХрзЗ рждржерзНржп, ржмрж╛ржпрж╝рзЛ, ржЫржмрж┐, ржЙржХрзНрждрж┐, ржоржЬрж╛рж░ ржпрзБржжрзНржз ржУ ржЖрж░ржУ ржЕржирзЗржХ ржХрж┐ржЫрзБ ржЦрзБржБржЬрзБржи ржПржмржВ ржЕржирзНржмрзЗрж╖ржг ржХрж░рзБржи"
 },
 category: "fun",
 guide: {
 en: `ржмрзНржпржмрж╣рж╛рж░:
{pn} [ржмрж┐рж╖ржпрж╝] тАФ ржЖрж░рзНржЯрж┐ржХрзЗрж▓ ржЦрзБржБржЬрзБржи
{pn}bio @user тАФ ржоржЬрж╛рж░ ржмрж╛ржпрж╝рзЛ рждрзИрж░рж┐ ржХрж░рзБржи
{pn}quote [ржмрж┐рж╖ржпрж╝] тАФ ржЙржХрзНрждрж┐ ржжрзЗржЦрзБржи
{pn}img [ржмрж┐рж╖ржпрж╝] тАФ ржЫржмрж┐ржЯрж┐ ржжрзЗржЦрзБржи
{pn}fight A vs B тАФ ржоржЬрж╛рж░ ржпрзБржжрзНржз
{pn}fact тАФ рж░тАНрзНржпрж╛ржирзНржбржо рждржерзНржп
{pn}personality [BD ржирж╛ржо] тАФ рждржерзНржп ржирж┐ржи
{pn}today тАФ ржЗрждрж┐рж╣рж╛рж╕рзЗ ржЖржЬржХрзЗрж░ ржжрж┐ржи
{pn}video [ржмрж┐рж╖ржпрж╝] тАФ ржнрж┐ржбрж┐ржУ ржкрзНрж░рж┐ржнрж┐ржЙ
{pn}related [ржмрж┐рж╖ржпрж╝] тАФ рж╕ржорзНржкрж░рзНржХрж┐ржд ржжрзЗржЦрзБржи`}
 },

 onStart: async function ({ message, event, args, usersData }) {
 const input = args.join(" ").trim();
 const lower = args.map(a => a.toLowerCase());
 const sub = lower[0];

 if (!input) return message.reply("тЭЧ ржжржпрж╝рж╛ ржХрж░рзЗ ржПржХржЯрж┐ ржмрж┐рж╖ржпрж╝ ржмрж╛ рж╕рж╛ржмржХржорзНржпрж╛ржирзНржб рж▓рж┐ржЦрзБржиред");

 // ЁЯУМ рж╕рж╛ржмржХржорзНржпрж╛ржирзНржб рж╣рзНржпрж╛ржирзНржбрзЗрж▓рж┐ржВ
 if (sub === "bio" && event.mentions) {
 const uid = Object.keys(event.mentions)[0];
 const name = await usersData.getName(uid);
 return message.reply(`ЁЯСд *${name} ржПрж░ ржЙржЗржХрж┐ржкрж┐ржбрж┐ржпрж╝рж╛ ржмрж╛ржпрж╝рзЛ*
тФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБ
${name} рж╣рж▓рзЛ ржПржЗ ржЪрзНржпрж╛ржЯрзЗрж░ ржПржХржЬржи ржкрзНрж░ржнрж╛ржмрж╢рж╛рж▓рзА ржмрзНржпржХрзНрждрж┐ред рждрж╛рж░ ржЕржирж▓рж╛ржЗржи ржЙржкрж╕рзНржерж┐рждрж┐, ржЗржорзЛржЬрж┐ рж╕рзНржкрзНржпрж╛ржо ржПржмржВ рж╕ржмрж╛рж░ ржЬржирзНржп ржоржЬрж╛рж░ ржкрж░рж┐ржмрзЗрж╢ рждрзИрж░рж┐рж░ ржЬржирзНржп ржмрж┐ржЦрзНржпрж╛рждред`);
 }

 if (sub === "quote") {
 const quoteTopic = args.slice(1).join(" ");
 const qRes = await axios.get(`https://en.wikiquote.org/w/api.php?action=query&format=json&list=search&srsearch=${encodeURIComponent(quoteTopic)}&utf8=1`);
 const first = qRes.data.query.search[0]?.title;
 if (!first) return message.reply("тЭМ ржХрзЛржирзЛ ржЙржХрзНрждрж┐ ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝ржирж┐ред");
 return message.reply(`ЁЯза *${first} ржПрж░ ржЙржХрзНрждрж┐:*
тФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБ
"${quoteTopic}" тАФ [ржЙрзОрж╕: Wikiquote]`);
 }

 if (sub === "img") {
 const topic = args.slice(1).join(" ");
 const imgRes = await axios.get("https://en.wikipedia.org/w/api.php", {
 params: {
 action: "query",
 titles: topic,
 prop: "pageimages",
 format: "json",
 piprop: "original"
 }
 });
 const pages = imgRes.data.query.pages;
 const page = Object.values(pages)[0];
 if (!page.original) return message.reply("тЭМ ржХрзЛржирзЛ ржЫржмрж┐ ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝ржирж┐ред");
 return message.reply({
 body: `ЁЯЦ╝я╕П *ржЙржЗржХрж┐ржкрж┐ржбрж┐ржпрж╝рж╛ ржерзЗржХрзЗ ржЫржмрж┐*
тФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБ
ЁЯФЧ ${page.original.source}
┬й Shipu Ai`,
 attachment: await global.utils.getStreamFromURL(page.original.source)
 });
 }

 if (sub === "fight") {
 const fightString = input.slice(6).split(" vs ");
 if (fightString.length !== 2) return message.reply("тЪФя╕П ржмрзНржпржмрж╣рж╛рж░: +wikifight A vs B");
 return message.reply(`тЪФя╕П *ржЙржЗржХрж┐ ржпрзБржжрзНржз рж╢рзБрж░рзБ!*
тФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБ
${fightString[0]} ржкрзНрж░ржержорзЗ ржорж┐ржо ржЫрзБржБржбрж╝рж▓рзЛред
${fightString[1]} ржкрзНрж░рждрж┐ржХрзНрж░рж┐ржпрж╝рж╛ ржжрж┐рж▓рзЛ ржХрзНрж░рж┐ржЮрзНржЬ ржжрж┐ржпрж╝рзЗред
рж╢рзЗрж╖рзЗ ржжрзБржЬржиржХрзЗржЗ ржоржбрж╛рж░рзЗржЯрж░ ржЯрж╛ржЗржоржЖржЙржЯ ржжрж┐рж▓рзЛред`);
 }

 if (sub === "fact") {
 const facts = [
 "ржЕржХрзНржЯрзЛржкрж╛рж╕рзЗрж░ рждрж┐ржиржЯрж┐ рж╣рзГржжржпрж╝ ржерж╛ржХрзЗред",
 "ржоржзрзБ ржХржЦржирзЛ ржирж╖рзНржЯ рж╣ржпрж╝ ржирж╛ред",
 "ржХрж▓рж╛ ржПржХржЯрж┐ ржмрзЗрж░рж┐ ржХрж┐ржирзНрждрзБ рж╕рзНржЯрзНрж░ржмрзЗрж░рж┐ ржиржпрж╝ред",
 "ржирзАрж▓ рждрж┐ржорж┐рж░ рж╣рзГржжрж╕рзНржкржирзНржжржи рзи ржорж╛ржЗрж▓ ржжрзВрж░ ржерзЗржХрзЗржУ рж╢рзЛржирж╛ ржпрж╛ржпрж╝ред"
 ];
 return message.reply(`ЁЯУМ *ржЬрж╛ржирж╛ ржЕржЬрж╛ржирж╛ рждржерзНржп:*
тФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБ
${facts[Math.floor(Math.random() * facts.length)]}`);
 }

 if (sub === "personality") {
 const topic = args.slice(1).join(" ");
 return message.reply(`ЁЯФН *ржмрж╛ржВрж▓рж╛ржжрзЗрж╢рж┐ ржмрзНржпржХрзНрждрж┐рждрзНржм: ${topic}*
тФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБ
рж╕ржорзНржкрзВрж░рзНржг рждржерзНржпрзЗрж░ ржЬржирзНржп тЮд +wiki ${topic} ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржиред`);
 }

 if (sub === "today") {
 try {
 const day = new Date();
 const month = `${day.getMonth() + 1}`.padStart(2, '0');
 const date = `${day.getDate()}`.padStart(2, '0');
 const formatted = `${month}/${date}`;

 const res = await axios.get(`https://en.wikipedia.org/api/rest_v1/feed/onthisday/events/${month}/${date}`);
 const events = res.data.events;

 if (!events || events.length === 0) return message.reply("тЭМ ржЖржЬржХрзЗрж░ ржЬржирзНржп ржХрзЛржирзЛ ржЙрж▓рзНрж▓рзЗржЦржпрзЛржЧрзНржп ржШржЯржирж╛ ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝ржирж┐ред");

 const lines = events.slice(0, 3).map((e, i) => `${i + 1}. ${e.text}`);
 return message.reply(`ЁЯУЕ *ржЗрждрж┐рж╣рж╛рж╕рзЗ ржЖржЬ (${date}-${month})*
тФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБ
${lines.join("\n")}`);
 } catch (err) {
 console.error(err);
 return message.reply("тЭМ ржЖржЬржХрзЗрж░ ржШржЯржирж╛рж╕ржорзВрж╣ ржЖржирждрзЗ рж╕ржорж╕рзНржпрж╛ рж╣ржпрж╝рзЗржЫрзЗред ржкрж░рзЗ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред");
 }
 }

 if (sub === "video") {
 return message.reply("ЁЯОЮя╕П ржЙржЗржХрж┐ржкрж┐ржбрж┐ржпрж╝рж╛ ржнрж┐ржбрж┐ржУ рж╕ржВрж░ржХрзНрж╖ржг ржХрж░рзЗ ржирж╛ред ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржЗржЙржЯрж┐ржЙржм ржмрж╛ ржЕржирзНржпрж╛ржирзНржп ржЙрзОрж╕ ржжрзЗржЦрзБржиред");
 }

 if (sub === "related") {
 return message.reply("ЁЯУЪ рж╕ржорзНржкрж░рзНржХрж┐ржд ржЯржкрж┐ржХ ржжрзЗржЦрждрзЗ ржЖрж░рзНржЯрж┐ржХрзЗрж▓рзЗрж░ 'See Also' рж╕рзЗржХрж╢ржи ржЪрзЗржХ ржХрж░рзБржиред");
 }

 // ЁЯФО ржкрзНрж░ржзрж╛ржи ржЙржЗржХрж┐ржкрж┐ржбрж┐ржпрж╝рж╛ рж╕рж╛рж░рзНржЪ (ржмрж╛ржВрж▓рж╛)
 const res = await axios.get(`https://bn.wikipedia.org/api/rest_v1/page/summary/${encodeURIComponent(input)}`);
 const summary = res.data;

 if (!summary.extract) return message.reply("тЭМ рждржерзНржп ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝ржирж┐ред ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржмрж┐рж╖ржпрж╝ржЯрж┐ рж╕ржарж┐ржХржнрж╛ржмрзЗ рж▓рж┐ржЦрзБржиред");

 const formatted = `ЁЯУШ *${summary.title}*
тФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБ
${summary.extract}`;
 await message.reply(formatted);

 // ржЫржмрж┐ рж╢рзЗрж╖рзЗ
 if (summary.originalimage) {
 await message.reply({
 body: `ЁЯЦ╝я╕П *ржЙржЗржХрж┐ржкрж┐ржбрж┐ржпрж╝рж╛ ржЫржмрж┐*
тФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБ
ЁЯФЧ ${summary.originalimage.source}
┬й Shipu Ai`,
 attachment: await global.utils.getStreamFromURL(summary.originalimage.source)
 });
 }
 }
};